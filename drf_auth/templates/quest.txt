Вот моё пиложение drf
внутри 3 приложения:
1.drf_auth
/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/drf_auth/settings.py
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-q0bp(*5pleb5&po@_cutbi!)qsbbgez2ofhvqu0pt9f!9yr3hb'

DEBUG = True
ALLOWED_HOSTS = [
    '127.0.0.1',
    'www.intizar.pythonanywhere.com',
    'intizar.pythonanywhere.com'
]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'djoser',
    'drf_yasg',
    'corsheaders',
    'user',
    'services'
]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drf_auth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r'^/api/.*$'
WSGI_APPLICATION = 'drf_auth.wsgi.application'
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
SIMPLE_JWT = {
   'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
   'AUTH_HEADER_TYPES': ('Bearer',)
}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    #     'OPTIONS': {
    #         'password_list_path': None,
    #     },
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
DJOSER = {
    'SERIALIZERS': {
        'user_create': 'api.serializers.UserCreateSerializer',
        'user': 'api.serializers.UserSerializer',
        'current_user': 'api.serializers.UserSerializer', 
    }
}
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'user.CustomUser'

/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/drf_auth/urls.py
from django.contrib import admin
from django.urls import path, include
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from . import views

schema_view = get_schema_view(
   openapi.Info(
      title="intizar API",
      default_version='v1',
      description="Documentation for project intizar",
      contact=openapi.Contact(email="dontWriteME@intizar.com"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('', views.home, name='home'),
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
    path('swagger(?P<format>\.json|\.yaml)',
         schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0),
         name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0),
         name='schema-redoc'),
]

2.api
/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/api/serializers.py
from rest_framework import serializers
from djoser.serializers import UserCreateSerializer as BaseUserCreateSerializer

from user.models import CustomUser
from services.models import UserService


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ('id', 'email', 'username', 'contactId')
        ref_name = 'CustomUserSerializer'


class UserCreateSerializer(BaseUserCreateSerializer):
    class Meta(BaseUserCreateSerializer.Meta):
        model = CustomUser
        fields = ('id', 'email', 'username', 'password', 'contactId')
        extra_kwargs = {
            'contactId': {'required': True},
            'password': {'write_only': True}
        }
        ref_name = 'CustomUserCreateSerializer'


class UserServiceSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserService
        fields = ['user', 'service', 'status', 'start_date', 'end_date']


/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/api/urls.py
from django.urls import path, include
from .views import (
     AuthStatusView, UserViewSet, UserContactView,
     UserManagerView, UserCompaniesView, UserCompanyDetailsView,
     UserCompanyDocumentsView, DownloadFileView,
     UserServiceCreateView, UserServiceStatusUpdateView,
     UserServiceExpirationCheckView,
)
from rest_framework.routers import DefaultRouter

app_name = 'api'

router = DefaultRouter()
router.register(r'users', UserViewSet, basename='user')

urlpatterns = [
     path('v1/auth/', include('djoser.urls')),
     path('v1/auth/', include('djoser.urls.jwt')),
     path('v1/auth/status/',
          AuthStatusView.as_view(),
          name='auth-status'),
     path('v1/auth/me/',
          UserViewSet.as_view({'get': 'retrieve'}),
          name='user-me'),
     path('v1/hooks/users_me_contact/',
          UserContactView.as_view(),
          name='user-contact'),
     path('v1/hooks/users_me_manager/',
          UserManagerView.as_view(),
          name='user-manager'),
     path('v1/hooks/company_list/',
          UserCompaniesView.as_view(),
          name='company-list'),
     path('v1/hooks/user_me_company/',
          UserCompanyDetailsView.as_view(),
          name='user-company-details'),
     path('v1/hooks/user_company_documents/',
          UserCompanyDocumentsView.as_view(),
          name='user-company-documents'),
     path('v1/hooks/downloadfile/<str:folder_id>/<str:file_id>/',
          DownloadFileView.as_view(),
          name='download-file'),
     path('', include(router.urls)),
     path('user-service/create/',
          UserServiceCreateView.as_view(),
          name='user-service-create'),
     path('user-service/<int:user_service_id>/update-status/',
          UserServiceStatusUpdateView.as_view(),
          name='user-service-update-status'),
     path('user-service/check-expiration/',
          UserServiceExpirationCheckView.as_view(),
          name='user-service-check-expiration'),
]

/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/api/views.py
import requests

from django.http import HttpResponse
from django.utils import timezone

from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from djoser.views import UserViewSet as BaseUserViewSet

from services.models import UserService, Service

import yaml

from .serializers import UserSerializer, UserServiceSerializer

WEBHOOK_TOKEN = 'tuzwh9ecszs0jhhc'
B24_USER_ID = '7'


class UserContactView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user

        if not user.contactId:
            return Response({'error': 'contactId not found.'}, status=400)

        # contact_id = user.contactId
        contact_id = 11

        url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/crm.contact.get.json?id={contact_id}'

        response = requests.get(url)

        data = response.json().get('result', {})

        filtered_data = {
            'ID': data.get('ID'),
            'NAME': data.get('NAME'),
            'SECOND_NAME': data.get('SECOND_NAME'),
            'LAST_NAME': data.get('LAST_NAME'),
            'LEAD_ID': data.get('LEAD_ID'),
            'TYPE_ID': data.get('TYPE_ID'),
            'BIRTHDATE': data.get('BIRTHDATE'),
            'HAS_PHONE': data.get('HAS_PHONE'),
            'HAS_EMAIL': data.get('HAS_EMAIL'),
            'HAS_IMOL': data.get('HAS_IMOL'),
            'DATE_CREATE': data.get('DATE_CREATE'),
            'DATE_MODIFY': data.get('DATE_MODIFY'),
            'ASSIGNED_BY_ID': data.get('ASSIGNED_BY_ID'),
        }

        return Response({'result': filtered_data}, status=response.status_code)


class UserManagerView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user_contact_view = UserContactView()
        data = user_contact_view.get(request).data
        assigned_by_id = data.get('result', {}).get('ASSIGNED_BY_ID')

        url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/user.get.json?id={assigned_by_id}'

        response = requests.get(url)

        # data = response.json().get('result', {})

        # filtered_data = {
        #     'ID': data.get('ID'),
        #     'ACTIVE': data.get('ACTIVE'),
        #     'NAME': data.get('NAME'),
        #     'LAST_NAME': data.get('LAST_NAME'),
        #     'SECOND_NAME': data.get('SECOND_NAME'),
        #     'TITLE': data.get('TITLE'),
        #     'IS_ONLINE': data.get('IS_ONLINE'),
        # }

        # return Response({'result': filtered_data}, status=response.status_code)

        return Response(response.json(), status=response.status_code)


class UserCompaniesView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user_contact_view = UserContactView()
        data = user_contact_view.get(request).data
        user_id = data.get('result', {}).get('ID')

        url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/crm.contact.company.items.get.json?id={user_id}'

        response = requests.get(url)

        return Response(response.json(), status=response.status_code)


class UserCompanyDetailsView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user_companies_view = UserCompaniesView()
        companies_response = user_companies_view.get(request)
        company_id_list = [company['COMPANY_ID'] for company in
                           companies_response.data.get('result', [])]
        company_details_list = []

        for company_id in company_id_list:
            url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/crm.company.get.json?id={company_id}'
            response = requests.get(url)

            if response.status_code == 200:
                company_data = response.json().get('result', {})

                filtered_company_data = {
                    'COMPANY_TYPE': company_data.get('COMPANY_TYPE'),
                    'TITLE': company_data.get('TITLE'),
                    'LOGO': company_data.get('LOGO'),
                    'LEAD_ID': company_data.get('LEAD_ID'),
                    'HAS_PHONE': company_data.get('HAS_PHONE'),
                    'HAS_EMAIL': company_data.get('HAS_EMAIL'),
                    'HAS_IMOL': company_data.get('HAS_IMOL'),
                    'BANKING_DETAILS': company_data.get('BANKING_DETAILS'),
                    'INDUSTRY': company_data.get('INDUSTRY'),
                    'REVENUE': company_data.get('REVENUE'),
                    'CURRENCY_ID': company_data.get('CURRENCY_ID'),
                    'EMPLOYEES': company_data.get('EMPLOYEES'),
                    'OPENED': company_data.get('OPENED'),
                    'IS_MY_COMPANY': company_data.get('IS_MY_COMPANY'),
                    'UF_CRM_1729153192833': company_data.get('UF_CRM_1729153192833'),
                }
                company_details_list.append(filtered_company_data)
            else:
                company_details_list.append({'error': 'Error fetching company'
                                             f'{company_id}: {response.text}'})

        return Response(company_details_list, status=200)

class UserCompanyDocumentsView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user_companies_view = UserCompanyDetailsView()
        companies_response = user_companies_view.get(request)
        companies_data = companies_response.data

        if not companies_data:
            return Response({"error": "No associated companies found."}, status=404)

        company = companies_data[0]  # Берем первую компанию пользователя
        folder_id = company.get('UF_CRM_1729153192833')

        if not folder_id:
            return Response({"error": "Folder ID not found in company data."}, status=400)

        url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/disk.folder.getchildren.json?id={folder_id}'
        response = requests.get(url)
        response_data = response.json()
        base_url = request.build_absolute_uri('/api/v1/hooks/downloadfile')

        documents = response_data.get('result', [])
        if not documents:
            return Response({"error": "No documents found in the company folder."}, status=404)

        document_list = [
            {
                'ID': doc.get('ID'),
                'NAME': doc.get('NAME'),
                'TYPE': doc.get('TYPE'),
                'DOWNLOAD_URL_OLD': doc.get('DOWNLOAD_URL'),
                'DOWNLOAD_URL': f"{base_url}/{folder_id}/{doc.get('ID')}",
                'SIZE': doc.get('SIZE'),
                'CREATE_TIME': doc.get('CREATE_TIME'),
                'UPDATE_TIME': doc.get('UPDATE_TIME'),
            }
            for doc in documents
        ]

        return Response({"documents": document_list}, status=200)


class DownloadFileView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, folder_id, file_id):
        # Получение информации о файле
        url = f'https://b-p24.ru/rest/{B24_USER_ID}/{WEBHOOK_TOKEN}/disk.folder.getchildren.json?id={folder_id}'
        response = requests.get(url)
        response_data = response.json()
        print('response_data = ' + str(response_data))

        document = next((doc for doc in response_data.get('result', []) if doc.get('ID') == file_id), None)

        if not document:
            return Response({"error": "Document not found."}, status=404)

        download_url = document.get('DOWNLOAD_URL')
        print('download_url = ' + str(download_url))

        # Загружаем файл с Bitrix24
        file_response = requests.get(download_url)
        print('file_response = ' + str(file_response))

        # Возвращаем файл пользователю
        return HttpResponse(file_response.content, content_type=file_response.headers['Content-Type'], headers={
            'Content-Disposition': f'attachment; filename="{document["NAME"]}"'
        })


class UserServiceCreateView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        # Получаем необходимые данные из запроса
        service_id = request.data.get('service_id')
        end_date = request.data.get('end_date')

        # Проверяем, существует ли услуга
        try:
            service = Service.objects.get(id=service_id)
        except Service.DoesNotExist:
            return Response({"error": "Service not found."},
                            status=status.HTTP_404_NOT_FOUND)

        # Проверяем, существует ли уже такая связь для пользователя
        if UserService.objects.filter(user=request.user,
                                      service=service).exists():
            return Response({"error": "User is already connected"
                             "to this service."},
                            status=status.HTTP_400_BAD_REQUEST)

        # Создаем новую связь пользователь - услуга
        user_service = UserService.objects.create(
            user=request.user,
            service=service,
            status='active',
            end_date=end_date
        )

        return Response(UserServiceSerializer(user_service).data,
                        status=status.HTTP_201_CREATED)


class UserServiceStatusUpdateView(APIView):
    permission_classes = [IsAuthenticated]

    def patch(self, request, user_service_id):
        try:
            user_service = UserService.objects.get(id=user_service_id,
                                                   user=request.user)
        except UserService.DoesNotExist:
            return Response({"error": "User service not found."},
                            status=status.HTTP_404_NOT_FOUND)

        # Получаем новый статус из запроса
        new_status = request.data.get('status')
        if new_status not in ['active', 'blocked', 'inactive']:
            return Response({"error": "Invalid status."},
                            status=status.HTTP_400_BAD_REQUEST)

        # Обновляем статус услуги
        user_service.status = new_status
        user_service.save()

        return Response(UserServiceSerializer(user_service).data,
                        status=status.HTTP_200_OK)

class UserServiceExpirationCheckView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        # Получаем все услуги пользователя
        user_services = UserService.objects.filter(user=request.user)

        # Проверяем срок действия каждой услуги
        expired_services = []
        for user_service in user_services:
            if user_service.is_expired():
                user_service.status = 'expired'
                user_service.save()
                expired_services.append(user_service)

        return Response({"expired_services":
                        [UserServiceSerializer(us).data
                            for us in expired_services]},
                        status=status.HTTP_200_OK)

class AuthStatusView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response({'is_authenticated': True})


class UserViewSet(BaseUserViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = UserSerializer


def schema_view(request):
    with open('schema.yaml', 'r') as f:
        schema = yaml.safe_load(f)
    return HttpResponse(yaml.dump(schema), content_type='application/yaml')

3.user
/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/user/models.py
from django.contrib.auth.models import AbstractUser
from django.db import models


class CustomUser(AbstractUser):
    contactId = models.CharField(max_length=100,
                                 blank=False,
                                 null=False)
                          
/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/user/admin.py                                 
from django.contrib import admin
from .models import CustomUser
from services.models import Service, UserService

class CustomUserAdmin(admin.ModelAdmin):
    list_display = ('username', 'email',
                    'first_name', 'last_name',
                    'contactId', 'is_staff')
    list_filter = ('is_staff', 'is_active')
    search_fields = ('email', 'last_name')


class ServiceAdmin(admin.ModelAdmin):
    list_display = ('name', 'provider', 'price')
    search_fields = ('name', 'provider')


class UserServiceAdmin(admin.ModelAdmin):
    list_display = ('user', 'service', 'date_connected',
                    'expiration_date', 'status')
    list_filter = ('status',)
    search_fields = ('user__username', 'service__name') 

admin.site.register(Service, ServiceAdmin)
admin.site.register(UserService, UserServiceAdmin)
admin.site.register(CustomUser, CustomUserAdmin)

4.services
/Users/sergeykhamatulin/Dev/AuthorIT/intizar/drf-auth/drf-auth/drf_auth/services/models.py
from django.db import models
from django.conf import settings
from datetime import date


class Service(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255)
    provider = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.name} ({self.provider})"


class UserService(models.Model):
    STATUS_CHOICES = [
        ('active', 'Active'),
        ('blocked', 'Blocked'),
        ('expired', 'Expired'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL,
                             on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    date_connected = models.DateField(auto_now_add=True)
    expiration_date = models.DateField()
    status = models.CharField(max_length=10,
                              choices=STATUS_CHOICES,
                              default='active')

    def __str__(self):
        return f"{self.user.username} - {self.service.name} ({self.status})"

    def check_status(self):
        """Проверка срока действия услуги и блокировка по истечению"""
        if date.today() > self.expiration_date and self.status == 'active':
            self.status = 'expired'
            self.save()


В приложении есть ошибки?